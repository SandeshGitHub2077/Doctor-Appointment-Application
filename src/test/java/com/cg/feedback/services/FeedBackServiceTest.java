package com.cg.feedback.services;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;

import com.cg.feedback.entites.FeedBack;
import com.cg.feedback.repositories.FeedBackJpaRepository;

@SpringBootTest(classes = { FeedBackServiceTest.class })
class FeedBackServiceTest {
	@Mock
	FeedBackJpaRepository feedBackJpaRepository;

	@InjectMocks
	FeedBackService feedBackService;

	public List<FeedBack> feedBackData;

	@Test
	@Order(1)
	void test_getAllFeedbacks() {
		List<FeedBack> feedBackData = new ArrayList<FeedBack>();
		feedBackData.add(new FeedBack(33, 6, "commentTest1", 3, 3)); // doubt....first parameter is autogenerated
		feedBackData.add(new FeedBack(43, 7, "commentTest2", 4, 4));

		// Mocking
		when(feedBackJpaRepository.findAll()).thenReturn(feedBackData);
		assertEquals(feedBackData.size(), feedBackService.getAllFeedbacks().size());
	}

	@Test
	@Order(2)
	void test_addFeedBack() {
		FeedBack feedBack = new FeedBack(33, 6, "commentTest1", 3, 3);
		when(feedBackJpaRepository.save(feedBack)).thenReturn(feedBack);
		assertEquals("Added successfully", feedBackService.addFeedBack(feedBack));
	}

	@Test
	@Order(3)
	void test_findAllByPatientId() {
		List<FeedBack> feedBackData = new ArrayList<FeedBack>();
		feedBackData.add(new FeedBack(33, 6, "commentTest1", 3, 3));
		feedBackData.add(new FeedBack(43, 7, "commentTest2", 4, 3));

		int patientId = 3;
		// Mocking
		when(feedBackJpaRepository.findAllByPatientId(patientId)).thenReturn(feedBackData);

		assertEquals(feedBackData, feedBackService.findAllByPatientId(patientId));
	}

	@Test
	@Order(4)
	void testFail_findAllByPatientId() {
		List<FeedBack> feedBackData1 = new ArrayList<FeedBack>();
		List<FeedBack> feedBackData2 = new ArrayList<FeedBack>();
		feedBackData1.add(new FeedBack(33, 6, "commentTest1", 3, 3));
		feedBackData2.add(new FeedBack(43, 7, "commentTest2", 4, 3));

		int patientId = 3;
		// Mocking
		when(feedBackJpaRepository.findAllByPatientId(patientId)).thenReturn(feedBackData2);

		assertNotEquals(feedBackData1, feedBackService.findAllByPatientId(patientId));
	}

	@Test
	@Order(5)
	void test_findAllByDoctorId() {
		List<FeedBack> feedBackData = new ArrayList<FeedBack>();
		feedBackData.add(new FeedBack(33, 6, "commentTest1", 3, 3));
		feedBackData.add(new FeedBack(43, 7, "commentTest2", 4, 3));
//		feedBackData.add(new FeedBack(0, 0, null, 0, 0))

		int doctorId = 3;
		// Mocking
		when(feedBackJpaRepository.findAllByDoctorId(doctorId)).thenReturn(feedBackData);

		assertEquals(feedBackData, feedBackService.findAllByDoctorId(doctorId));
	}

	@Test
	@Order(6)
	void testFail_findAllByDoctorId() {
		List<FeedBack> feedBackData1 = new ArrayList<FeedBack>();
		List<FeedBack> feedBackData2 = new ArrayList<FeedBack>();
		feedBackData1.add(new FeedBack(33, 6, "commentTest1", 3, 3));
		feedBackData2.add(new FeedBack(43, 7, "commentTest2", 4, 3));

		int doctorId = 3;
		// Mocking
		when(feedBackJpaRepository.findAllByDoctorId(doctorId)).thenReturn(feedBackData2);

		assertNotEquals(feedBackData1, feedBackService.findAllByDoctorId(doctorId));
	}

}
